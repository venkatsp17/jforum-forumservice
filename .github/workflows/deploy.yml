name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
           mvn clean install -DskipTests 
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Save artifact
      uses: actions/upload-artifact@v4
      with:
        name: github-action-artifact
        path: artifacts
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/jforum_forumservice:latest
        platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: SSH to EC2 and deploy Docker container
      run: |
        # Add Docker's official GPG key:
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo systemctl start docker
        sudo systemctl enable docker
        # Ensure SSH key is added and EC2 access is available
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem  # Set correct permissions for the key
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Stop the old container if it exists
          sudo docker rm -f jforum_forumservice-container || true

          # Pull the latest image from Docker Hub
          sudo docker pull venkatsp17/jforum_forumservice:latest
          
          # Run the new Docker container with MySQL connection details as environment variables
          sudo docker run -d -p 8777:8777 --name jforum_forumservice-container \
            -e SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME="${{ secrets.MYSQL_USERNAME }}" \
            -e SPRING_DATASOURCE_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
            venkatsp17/jforum_forumservice:latest
        EOF
    

